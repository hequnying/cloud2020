

#+TITLE: cloud2020

* 新建聚合类总工程父项目

1. 在IntelliJ IDEA中新建项目，在弹出的 *New Project* 对话框中，在左侧选择 *Maven* ，在右侧 *Project SDK* 中选择 *1.8* ，勾选 *Create from archetype* 并选择 *org.apche.maven.archetypes:maven-archetype-site* ，点击 *下一步* 。
2. 填写 *GroupId*: *com.becheer.springcloud*，填写*ArtifactId*: *cloud2020* ，点击 *下一步* 。
3. 选择 *Maven home directory* 目录，记得不要选择默认自带的Maven版本，选择自己安装的Maven版本，点击 *下一步* 。
4. 确认 *Project name* 和 *Project location* 无误后，可以点击 *完成* 。

* 复制.gitignore文件

根据项目开发环境情况，从[[https://github.com/github/gitignore][github/gitignore]]复制所需的各种.gitignore模板内容拼接成一个.gitignore文件，作为项目的.gitignore文件。
一般常用的.gitignore文件内容，整理后存放在自己的dotfiles目录下，方便以后快速的创建项目的.gitignore目录，进入项目目录后，复制文件:
#+BEGIN_SRC bash

cp ~/dotfiles/.gitignore .

#+END_SRC
* git

进入项目目录后，执行git命令:

#+BEGIN_SRC bash
git init
git add README.org
git commit -m "README.org"
git add .gitignore
git commit -m ".gitignore"
git add *
git commit -m "cloud2020"
git remote add origin https://your-git-server-domain.com/xxx/cloud2020.git
git push -u origin master
#+END_SRC
* git-flow

[[https://github.com/nvie/gitflow][git-flow]]是一个很好的git分支管理插件，相关可以介绍和安装方法，可以在其[[https://github.com/nvie/gitflow][git-flow的github项目]]中了解和学习。
进入项目目录后，执行命令:

#+BEGIN_SRC bash
git flow init
#+END_SRC

执行命名后，在随后弹出的各种询问中直接回车选择默认。执行成功后，会自动创建 *develop* git分支，并且已经自动切换到 *develop* 分支，这时候，可以执行命令将 *develop* 分支推送到git服务器。

#+BEGIN_SRC bash
git push --set-upstream origin develop
#+END_SRC

在 *IntelliJ IDEA* 中，可以安装[[https://github.com/rieonke/idea-git-flow][GitFlow]]插件，可以帮助我们快速 *start* 和 *finish* 各种分支。

* 整理聚合类总工程项目的目录和文件

1. 修改pom.xml文件

使用gitflow初始化处理后，切换到develop分支。为后续添加子项目模块、统一管理项目依赖包等，对pom.xml文件做以下处理:

    + 仅保留pom.xml中project属性下的moduleVersion、groupId、artifactId、version属性;
    + 增加packaging属性, 设置值为pom;
    + 增加properties属性，主要用于统一管理整个项目各个依赖包的版本号;
    + 增加dependencyManagement属性，主要用于声明整个项目依赖的依赖包，明确依赖包的版本号，在子项目模块中，可以不用声明依赖包也能继承该聚合类总工程项目中声明的依赖包;
 
根据当前(2020年4月)Spring Boot和Spring Cloud框架各组件项目代码的维护情况，初步确定使用2.2.2版本的Spring Boot，使用Hoxton.SR1版本的Spring Cloud。

最终，聚合类总工程项目的pom.xml文件内容如下:

#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.atguigu.springcloud</groupId>
    <artifactId>cloud2020</artifactId>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>cloud-provider-payment8001</module>
        <module>cloud-consumer-order80</module>
        <module>cloud-api-common</module>
        <module>cloud-eureka-server7001</module>
    </modules>
    <packaging>pom</packaging>

    <!-- 统一管理依赖包的版本号 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.16.18</lombok.version>
        <mysql.version>5.1.47</mysql.version>
        <druid.version>1.1.16</druid.version>
        <druid.spring.boot.starter.version>1.1.10</druid.spring.boot.starter.version>
        <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
    </properties>

    <!--子模块继承之后，提供作用：锁定版本+子module不用写groupId和version-->
    <dependencyManagement><!--定义规范，但不导入-->
        <dependencies>
            <dependency>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.0.0</version>
            </dependency>
            <!--spring boot 2.2.2-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.2.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud 阿里巴巴-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.1.0.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--mysql-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- druid-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.spring.boot.starter.version}</version>
            </dependency>
            <!--mybatis-->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
            <!--junit-->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <!--log4j-->
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>

#+END_SRC

2. 删除聚合类总工程项目的src目录、target目录
